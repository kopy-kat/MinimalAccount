/// @title MinimalAccount
/// @notice Gas optimized minimal ERC-4337 account
/// @author kopy-kat <https://github.com/kopy-kat>
/// @custom:inspiration SimpleAccount <https://github.com/eth-infinitism/account-abstraction/blob/develop/contracts/samples/SimpleAccount.sol>
/// @custom:inspiration Huffmate <https://github.com/huff-language/huffmate>

/* Interface */
#define function execute(address,uint256,bytes) nonpayable returns ()

/* Constants */
#define constant ENTRYPOINT_ADDRESS = 0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789
#define constant OWNER_ADDRESS = 0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf // replaced by the factory

///@dev The number which `s` must not exceed in order for the signature to be non-malleable
#define constant MALLEABILITY_THRESHOLD = 0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0

///@dev Ethereum Signed Message header
#define constant SIG_HEADER = 0x0000000019457468657265756d205369676e6564204d6573736167653a0a3332

/* Helpers */
#define macro REQUIRE_FROM_ENTRYPOINT() = takes (0) returns (0) {
    caller [ENTRYPOINT_ADDRESS] eq fromEntrypoint jumpi

    0x00 0x00 revert

    fromEntrypoint:
}

#define macro PAY_PREFUND() = takes (0) returns (0) {
    0x44 calldataload           // [value]
    dup1                        // [value, value]
    0x00 eq noPrefund jumpi     // [value]

    0x00                        // [retOffset, value]
    0x00                        // [retSize, retOffset, value]
    0x00                        // [argSize, retOffset, retSize, value]
    0x00                        // [argOffset, argSize, retOffset, retSize, value]
    swap4                       // [value, argOffset, argSize, retOffset, retSize]
    caller                      // [target, value, argOffset, argSize, retOffset, retSize]
    gas                         // [gas, target, value, argOffset, argSize, retOffset, retSize]
    call                        // [success]

    noPrefund:
}

#define macro VALIDATE_SIGNATURE() = takes (0) returns (0) {
    0x1a4 calldataload       // [sigSlot]
    0xa4 add                 // [sSlot]
    dup1 calldataload        // [s, sSlot]
    swap1                    // [sSlot, s]
    0x20 swap1 sub           // [rSlot, s]
    dup1 calldataload        // [r, rSlot, s]
    swap1                    // [rSlot, r, s]
    0x40 add                 // [vSlot, r, s]
    calldataload             // [v, r, s]
    0xF8 shr

    0x24 calldataload        // [hash, v, r, s]

    // Store in scratch space for hashing.
    0x20 mstore              // [v, r, s]
    [SIG_HEADER] 0x00 mstore // [v, r, s]

    0x3c 0x04 sha3           // [newHash, v, r, s]

    // If `s` is not in lower half order, such that the signature is malleable,
    // jump to `zero`.
    [MALLEABILITY_THRESHOLD] // [malleability_threshold, hash, v, r, s]
    dup5 gt                  // [s > malleability_threshold, hash, v, r, s]
    zero jumpi               // [hash, v, r, s]

    0x00 mstore              // [v, r, s]
    0x20 mstore              // [r, s]
    0x40 mstore              // [s]
    0x60 mstore              // []

    0x20 0x40 0x80 0x00 0x01 // [0x01, 0x00, 0x80, 0x40, 0x20]
    gas staticcall pop       // []

    // Restore the zero slot
    0x00 0x60 mstore         // []
    returndatasize 0x60 sub  // [0x60 - returndatasize]
    mload                    // [result]
    end jump

    zero:
        pop pop pop pop 0x00 // [0x00]
    end:

    [OWNER_ADDRESS] eq success jumpi

    0x01 0x00 mstore
    0x20 0x00 return

    success:
}

/* External functions */
#define macro VALIDATE_USEROP() = takes (0) returns (0) {
    REQUIRE_FROM_ENTRYPOINT()
    VALIDATE_SIGNATURE()
    PAY_PREFUND()

    0x20 0x80
    return
}

#define macro EXECUTE() = takes (0) returns (0) {
    REQUIRE_FROM_ENTRYPOINT()

    0x64 calldataload           // [argSize]
    dup1                        // [argSize, argSize]
    0x84                        // [offset, argSize, argSize]
    0x00                        // [destOffset, offset, argSize, argSize]
    calldatacopy                // [argSize]

    0x00                        // [retOffset, argSize]
    0x20                        // [retSize, retOffset, argSize]
    swap2                       // [argSize, retOffset, retSize]
    0x00                        // [argOffset, argSize, retOffset, retSize]
    0x24 calldataload           // [value, argOffset, argSize, retOffset, retSize]
    0x04 calldataload           // [target, value, argOffset, argSize, retOffset, retSize]
    gas                         // [gas, target, value, argOffset, argSize, retOffset, retSize]
    call                        // [success]
}

#define macro MAIN() = takes (0) returns (0) {
    0x00 calldataload 0xE0 shr
    dup1 0x3a871cdd eq validate jumpi
    dup1 __FUNC_SIG(execute) eq execute jumpi

    0x00 0x00 revert

    validate:
        VALIDATE_USEROP()
    execute:
        EXECUTE()

}