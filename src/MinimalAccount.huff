/// @title MinimalAccount
/// @notice Gas optimized minimal ERC-4337 account
/// @author kopy-kat <https://github.com/kopy-kat>
/// @custom:inspiration SimpleAccount <https://github.com/eth-infinitism/account-abstraction/blob/develop/contracts/samples/SimpleAccount.sol>
/// @custom:inspiration Huffmate <https://github.com/huff-language/huffmate>

/* Interface */
#define function execute(address,uint256,bytes) nonpayable returns ()

/* Constants */
#define constant ENTRYPOINT_ADDRESS = 0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789
#define constant OWNER_ADDRESS = 0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf // replaced by the factory

///@dev The number which `s` must not exceed in order for the signature to be non-malleable
#define constant MALLEABILITY_THRESHOLD = 0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0

///@dev Ethereum Signed Message header
#define constant SIG_HEADER = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000

#define macro MAIN() = takes (0) returns (0) {
    calldatasize iszero finish jumpi
    
    // check entrypoint
    caller [ENTRYPOINT_ADDRESS] eq iszero revertError jumpi
    0x00 calldataload 0xE0 shr
    0x3a871cdd eq validate jumpi

    0x00                        // [retSize]
    0x00                        // [retOffset, retSize]
    0x24 calldatasize sub       // [argSize, retOffset, retSize]
    dup1                        // [argSize, argSize, retOffset, retSize]
    0x24                        // [offset, argSize, argSize, retOffset, retSize]
    0x00                        // [destOffset, offset, argSize, argSize, retOffset, retSize]
    calldatacopy                // [argSize, retOffset, retSize]
    0x00                        // [argOffset, argSize, retOffset, retSize]
    0x14 calldataload           // [value, argOffset, argSize, retOffset, retSize]
    0x80 shr
    0x00 calldataload           // [target, value, argOffset, argSize, retOffset, retSize]
    0x60 shr
    gas                         // [gas, target, value, argOffset, argSize, retOffset, retSize]
    call                        // [success]
    stop

    validate:
        // mstore SIG_HEADER to scratch space
        [SIG_HEADER] 0x00 mstore // [0x20]

        // mstore userOpHash to scratch space
        0x20
        0x20                     // [0x20]
        0x20                     // [hashSize, 0x20]
        0x24                     // [hashOffset, hashSize, 0x20]
        0x1c                     // [hashMemOffset, hashOffset, hashSize, 0x20]
        calldatacopy             // [0x20]
        
        // mstore newHash to 0x00
        0x3c 0x00 sha3           // [newHash, 0x20]
        0x00                     // [0x00, newHash, 0x20]
        mstore                   // [0x20]

        // reset 0x20
        0x00                     // [0x00, 0x20]
        0x20                     // [0x20, 0x00, 0x20]
        mstore                   // [0x20]

        // signature verification
        // get sSlot to verify s value 
        0x41                     // [0x41, 0x20]
        0x21                     // [0x21, 0x41, 0x20]
        0x1a4 calldataload       // [sigSlot, 0x21, 0x41, 0x20]
        0xa5 add                 // [sSlot, 0x21, 0x41, 0x20]
        // If `s` is not in lower half order, such that the signature is malleable,
        // jump to `zero`.
        [MALLEABILITY_THRESHOLD] // [malleability_threshold,  sSlot, 0x21, 0x41, 0x20]
        dup2 calldataload        // [s, malleability_threshold, sSlot, 0x21, 0x41, 0x20]
        gt                       // [s > malleability_threshold, sSlot, 0x21, 0x41, 0x20]
        invalidSignature jumpi   // [sSlot, 0x21, 0x41, 0x20]

        // mstore signature(v,r,s) to 0x3f
        sub                      // [vSlot, 0x41, 0x20]
        0x3f                     // [0x3f, vSlot, 0x41, 0x20]
        calldatacopy             // [0x20]


        0x20 0x80 0x00 0x01      // [0x01, 0x00, 0x80, 0x40, 0x20]
        gas staticcall pop       // []

        mload                    // [result]


        [OWNER_ADDRESS] eq iszero invalidSignature jumpi // []

        // 3. Pay prefund
        0x44 calldataload           // [value]
        dup1                        // [value, value]
        iszero finish jumpi         // [value]

        0x00                        // [retOffset, value]
        0x00                        // [retSize, retOffset, value]
        0x00                        // [argSize, retOffset, retSize, value]
        0x00                        // [argOffset, argSize, retOffset, retSize, value]
        swap4                       // [value, argOffset, argSize, retOffset, retSize]
        caller                      // [target, value, argOffset, argSize, retOffset, retSize]
        gas                         // [gas, target, value, argOffset, argSize, retOffset, retSize]
        call                        // [success]

    finish:                         // [value, 0x20]
        0x20 0x80            
        return
    invalidSignature:
        0x01 0x00 mstore
        0x20 0x00 return
    revertError:
        0x00 0x00 revert
}
